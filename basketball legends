local uis = game:GetService("UserInputService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")

local isWorking = false
local isFollowing = false
local tempo = nil

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/drillygzzly/Roblox-UI-Libs/main/1%20Tokyo%20Lib%20(FIXED)/Tokyo%20Lib%20Source.lua"))({
    cheatname = "Ark",
    gamename = "Basketball Legends",
})

library:init()

local Window1  = library.NewWindow({
    title = "Ark | Basketball Legends",
    size = UDim2.new(0, 510, 0.6, 6)
})

local Tab1 = Window1:AddTab("  Main  ")
local SettingsTab = library:CreateSettingsTab(Window1)

local Section1 = Tab1:AddSection("Main", 1)
local Section2 = Tab1:AddSection("Extra Functions", 2)

Section1:AddToggle({
    text = "Shot Assistance",
    state = false,
    risky = true,
    tooltip = "BIND: V",
    flag = "Toggle_1",
    risky = false,
    callback = function(v)
        if v == true then
        print("Shot Assistance: ", v)
        else warn("Shot Assistance: ", v)
        end 
    end
})

Section1:AddSlider({
    enabled = true,
    text = "Time to Hold",
    tooltip = "Tip: 0.33-0.35 works better",
    flag = "Slider_1",
    suffix = "s",
    dragging = true,
    focused = false,
    min = 0.10,
    max = 0.35,
    increment = 0.01,
    risky = false,
    callback = function(v)
        tempo = v
    end
})

Section2:AddToggle({
    text = "Auto-Guard",
    state = false,
    risky = true,
    tooltip = "BIND: B",
    flag = "Toggle_2",
    risky = false,
    callback = function(v)
    if v == true then
    print("Auto-Guard: ", v)
    end
  end  
})

local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge
    local localPlayer = Players.LocalPlayer

    if not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return nil
    end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (localPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestPlayer = player
            end
        end
    end

    return closestPlayer
end

local function followPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local localPlayer = Players.LocalPlayer
    local humanoid = localPlayer.Character.Humanoid

    local targetRoot = targetPlayer.Character.HumanoidRootPart
    local followOffset = CFrame.new(0, 0, -5)
    local targetCFrame = targetRoot.CFrame * followOffset

    humanoid:MoveTo(targetCFrame.Position)
    humanoid.RootPart.CFrame = CFrame.new(humanoid.RootPart.Position) * CFrame.lookAt(targetRoot.Position)


end

uis.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.B then
        isFollowing = not isFollowing
    end
end)

uis.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == Enum.KeyCode.V then
        isWorking = true
        if isWorking then
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, nil)
            wait(tempo)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, nil)
            isWorking = false
        end
    end
end)

RunService.Heartbeat:Connect(function()
    if isFollowing then
        local closestPlayer = getClosestPlayer()
        if closestPlayer then
            followPlayer(closestPlayer)
        end
    end
end)


library:SendNotification("Loaded successfully!", 6)
